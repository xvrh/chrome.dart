import 'chrome.dart';
import 'dart:js_interop';
export 'chrome.dart';

extension JSChromeJSManagementExtension on JSChrome {
  /// The `chrome.management` API provides ways to manage the list of
  /// extensions/apps that are installed and running. It is particularly useful
  /// for extensions that <a href='override'>override</a> the built-in New Tab
  /// page.
  external JSManagement get Management;
}

@JS()
@staticInterop
class JSManagement {}

extension JSManagementExtension on JSManagement {
  /// Returns a list of information about installed extensions and apps.
  external void getAll();

  /// Returns information about the installed extension, app, or theme that has
  /// the given ID.
  external void get();

  /// Returns information about the calling extension, app, or theme. Note: This
  /// function can be used without requesting the 'management' permission in the
  /// manifest.
  external void getSelf();

  /// Returns a list of <a href='permission_warnings'>permission warnings</a>
  /// for the given extension id.
  external void getPermissionWarningsById();

  /// Returns a list of <a href='permission_warnings'>permission warnings</a>
  /// for the given extension manifest string. Note: This function can be used
  /// without requesting the 'management' permission in the manifest.
  external void getPermissionWarningsByManifest();

  /// Enables or disables an app or extension. In most cases this function must
  /// be called in the context of a user gesture (e.g. an onclick handler for a
  /// button), and may present the user with a native confirmation UI as a way
  /// of preventing abuse.
  external void setEnabled();

  /// Uninstalls a currently installed app or extension. Note: This function
  /// does not work in managed environments when the user is not allowed to
  /// uninstall the specified extension/app. If the uninstall fails (e.g. the
  /// user cancels the dialog) the promise will be rejected or the callback will
  /// be called with $(ref:runtime.lastError) set.
  external void uninstall();

  /// Uninstalls the calling extension. Note: This function can be used without
  /// requesting the 'management' permission in the manifest. This function does
  /// not work in managed environments when the user is not allowed to uninstall
  /// the specified extension/app.
  external void uninstallSelf();

  /// Launches an application.
  external void launchApp();

  /// Display options to create shortcuts for an app. On Mac, only packaged app
  /// shortcuts can be created.
  external void createAppShortcut();

  /// Set the launch type of an app.
  external void setLaunchType();

  /// Generate an app for a URL. Returns the generated bookmark app.
  external void generateAppForLink();

  /// Checks if the replacement android app can be installed. Errors generated
  /// by this API are reported by setting $(ref:runtime.lastError) and executing
  /// the function's regular callback.
  external void canInstallReplacementAndroidApp();

  /// Prompts the user to install the replacement Android app from the manifest.
  /// Errors generated by this API are reported by setting
  /// $(ref:runtime.lastError) and executing the function's regular callback.
  external void installReplacementAndroidApp();

  /// Launches the replacement_web_app specified in the manifest. Prompts the
  /// user to install if not already installed.
  external void installReplacementWebApp();

  /// Fired when an app or extension has been installed.
  external ChromeEvent get onInstalled;

  /// Fired when an app or extension has been uninstalled.
  external ChromeEvent get onUninstalled;

  /// Fired when an app or extension has been enabled.
  external ChromeEvent get onEnabled;

  /// Fired when an app or extension has been disabled.
  external ChromeEvent get onDisabled;
}
