import 'chrome.dart';
export 'chrome.dart';

final _management = ChromeManagement._();

extension ChromeChromeManagementExtension on Chrome {
  ChromeManagement get management => _management;
}

class ChromeManagement {
  ChromeManagement._();

  /// Returns a list of information about installed extensions and apps.
  void getAll() => throw UnimplementedError();

  /// Returns information about the installed extension, app, or theme that has
  /// the given ID.
  void get(id) => throw UnimplementedError();

  /// Returns information about the calling extension, app, or theme. Note: This
  /// function can be used without requesting the 'management' permission in the
  /// manifest.
  void getSelf() => throw UnimplementedError();

  /// Returns a list of <a href='permission_warnings'>permission warnings</a>
  /// for the given extension id.
  void getPermissionWarningsById(id) => throw UnimplementedError();

  /// Returns a list of <a href='permission_warnings'>permission warnings</a>
  /// for the given extension manifest string. Note: This function can be used
  /// without requesting the 'management' permission in the manifest.
  void getPermissionWarningsByManifest(manifestStr) =>
      throw UnimplementedError();

  /// Enables or disables an app or extension. In most cases this function must
  /// be called in the context of a user gesture (e.g. an onclick handler for a
  /// button), and may present the user with a native confirmation UI as a way
  /// of preventing abuse.
  void setEnabled(
    id,
    enabled,
  ) =>
      throw UnimplementedError();

  /// Uninstalls a currently installed app or extension. Note: This function
  /// does not work in managed environments when the user is not allowed to
  /// uninstall the specified extension/app. If the uninstall fails (e.g. the
  /// user cancels the dialog) the promise will be rejected or the callback will
  /// be called with $(ref:runtime.lastError) set.
  void uninstall(
    id,
    options,
  ) =>
      throw UnimplementedError();

  /// Uninstalls the calling extension. Note: This function can be used without
  /// requesting the 'management' permission in the manifest. This function does
  /// not work in managed environments when the user is not allowed to uninstall
  /// the specified extension/app.
  void uninstallSelf(options) => throw UnimplementedError();

  /// Launches an application.
  void launchApp(id) => throw UnimplementedError();

  /// Display options to create shortcuts for an app. On Mac, only packaged app
  /// shortcuts can be created.
  void createAppShortcut(id) => throw UnimplementedError();

  /// Set the launch type of an app.
  void setLaunchType(
    id,
    launchType,
  ) =>
      throw UnimplementedError();

  /// Generate an app for a URL. Returns the generated bookmark app.
  void generateAppForLink(
    url,
    title,
  ) =>
      throw UnimplementedError();

  /// Checks if the replacement android app can be installed. Errors generated
  /// by this API are reported by setting $(ref:runtime.lastError) and executing
  /// the function's regular callback.
  void canInstallReplacementAndroidApp() => throw UnimplementedError();

  /// Prompts the user to install the replacement Android app from the manifest.
  /// Errors generated by this API are reported by setting
  /// $(ref:runtime.lastError) and executing the function's regular callback.
  void installReplacementAndroidApp() => throw UnimplementedError();

  /// Launches the replacement_web_app specified in the manifest. Prompts the
  /// user to install if not already installed.
  void installReplacementWebApp() => throw UnimplementedError();

  /// Fired when an app or extension has been installed.
  Stream get onInstalled => throw UnimplementedError();

  /// Fired when an app or extension has been uninstalled.
  Stream get onUninstalled => throw UnimplementedError();

  /// Fired when an app or extension has been enabled.
  Stream get onEnabled => throw UnimplementedError();

  /// Fired when an app or extension has been disabled.
  Stream get onDisabled => throw UnimplementedError();
}

/// These are all possible app launch types.
enum LaunchType {
  openAsRegularTab('OPEN_AS_REGULAR_TAB'),
  openAsPinnedTab('OPEN_AS_PINNED_TAB'),
  openAsWindow('OPEN_AS_WINDOW'),
  openFullScreen('OPEN_FULL_SCREEN');

  const LaunchType(this.value);

  final String value;
}

/// A reason the item is disabled.
enum ExtensionDisabledReason {
  unknown('unknown'),
  permissionsIncrease('permissions_increase');

  const ExtensionDisabledReason(this.value);

  final String value;
}

/// The type of this extension, app, or theme.
enum ExtensionType {
  extension('extension'),
  hostedApp('hosted_app'),
  packagedApp('packaged_app'),
  legacyPackagedApp('legacy_packaged_app'),
  theme('theme'),
  loginScreenExtension('login_screen_extension');

  const ExtensionType(this.value);

  final String value;
}

/// How the extension was installed. One of
/// `admin`: The extension was installed because of an administrative policy,
/// `development`: The extension was loaded unpacked in developer mode,
/// `normal`: The extension was installed normally via a .crx file,
/// `sideload`: The extension was installed by other software on the machine,
/// `other`: The extension was installed by other means.
enum ExtensionInstallType {
  admin('admin'),
  development('development'),
  normal('normal'),
  sideload('sideload'),
  other('other');

  const ExtensionInstallType(this.value);

  final String value;
}
